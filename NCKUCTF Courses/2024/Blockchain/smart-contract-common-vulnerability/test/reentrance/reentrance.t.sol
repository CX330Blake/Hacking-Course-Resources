// SPDX-License-Identifier: MIT
pragma solidity ^0.6.12;
pragma experimental ABIEncoderV2;

import {Test} from "forge-std/Test.sol";
import {Reentrance} from "src/Reentrance/Reentrance.sol";

contract ReentranceTest is Test {
    Reentrance public reentrance;

    address public player = makeAddr("player");

    modifier checkChallengeSolved() {
        vm.startPrank(player);
        _;
        assertEq(
            address(reentrance).balance,
            0,
            "reentrance contract balance greater than 0"
        );
        vm.stopPrank();
    }

    function setUp() public {
        // set the player's balance to 1 ETH.
        vm.deal(player, 1 ether);

        // deploy the Reentrance contract (challenge)
        reentrance = new Reentrance();
        // set the reentrance's balance to 10 ETH.
        vm.deal(address(reentrance), 0.001 ether);
    }

    function testReentranceHack() external checkChallengeSolved {
        //@todo
    }
}
