// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import {Test, console} from "forge-std/Test.sol";
import {SideEntranceLenderPool} from "src/flashloan/SideEntranceLenderPool.sol";

contract SideEntranceTest is Test {
    address deployer = makeAddr("deployer");
    address player = makeAddr("player");

    uint256 constant ETHER_IN_POOL = 1000 ether;
    uint256 constant PLAYER_INITIAL_ETH_BALANCE = 1 ether;

    SideEntranceLenderPool pool;

    modifier checkChallengeSolved() {
        vm.startPrank(player, player);
        _;
        vm.stopPrank();

        assertEq(address(pool).balance, 0, "Pool still has ETH");
        assertEq(
            player.balance,
            ETHER_IN_POOL + PLAYER_INITIAL_ETH_BALANCE,
            "Not enough ETH in player account"
        );
    }

    function setUp() public {
        vm.deal(deployer, 1000 ether);

        vm.startPrank(deployer, deployer);
        pool = new SideEntranceLenderPool();
        pool.deposit{value: ETHER_IN_POOL}();
        vm.stopPrank();

        vm.deal(player, PLAYER_INITIAL_ETH_BALANCE);
    }

    function test_sideEntrance() public checkChallengeSolved {
        //@todo
    }
}
