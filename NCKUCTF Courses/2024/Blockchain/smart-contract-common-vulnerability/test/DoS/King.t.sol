// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import {Test, console2} from "forge-std/Test.sol";
import {King} from "src/DoS/King.sol";

contract KingTest is Test {
    King public king;

    address public currentKing = makeAddr("currentKing");
    address public player = makeAddr("player");

    modifier checkChallengeSolved() {
        vm.startPrank(player);
        _;
        assertNotEq(king._king(), currentKing, "The king doesn't change");
        vm.stopPrank();

        vm.expectRevert();
        // We confirm that no one can become the king,
        // even if they provide more ETH than the current king (e.g. the player)
        vm.startPrank(currentKing);
        payable(king).transfer(9 ether);
        vm.stopPrank();
    }

    function setUp() public {
        // set the player's balance to 1 ETH.
        vm.deal(player, 1 ether);
        // set the currentKing's balance to 10 ETH.
        vm.deal(currentKing, 10 ether);

        vm.startPrank(currentKing);
        // deploy the King contract (challenge) with 1 ether ETH
        king = new King{value: 1 ether}();
        vm.stopPrank();
    }

    function testKingHack() external checkChallengeSolved {
        //@todo
    }
}
